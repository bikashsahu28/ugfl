Job Application Form 
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Upload, Mail, Phone, MapPin, Briefcase, User, Calendar, GraduationCap, FileText } from 'lucide-react';

const JobApplicationForm = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    position: '',
    location: '',
    experience: '',
    education: '',
    skills: '',
    coverLetter: '',
    resume: null
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);

  const positions = [
    'Software Engineer',
    'Product Manager',
    'UX/UI Designer',
    'Data Analyst',
    'Marketing Specialist',
    'Sales Representative',
    'Customer Support',
    'HR Manager',
    'Finance Analyst'
  ];

  const locations = [
    'New York, NY',
    'San Francisco, CA',
    'Austin, TX',
    'Seattle, WA',
    'Chicago, IL',
    'Remote - US',
    'Remote - Global'
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // Validate file type
      if (!file.type.includes('pdf') && !file.type.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {
        setErrors(prev => ({
          ...prev,
          resume: 'Please upload a PDF or DOCX file'
        }));
        return;
      }
      
      // Validate file size (5MB limit)
      if (file.size > 5 * 1024 * 1024) {
        setErrors(prev => ({
          ...prev,
          resume: 'File size should be less than 5MB'
        }));
        return;
      }
      
      setFormData(prev => ({
        ...prev,
        resume: file
      }));
      setErrors(prev => ({
        ...prev,
        resume: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.firstName.trim()) newErrors.firstName = 'First name is required';
    if (!formData.lastName.trim()) newErrors.lastName = 'Last name is required';
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }
    
    if (!formData.phone.trim()) {
      newErrors.phone = 'Phone number is required';
    } else if (!/^\d{10,15}$/.test(formData.phone.replace(/[^0-9]/g, ''))) {
      newErrors.phone = 'Phone number is invalid';
    }
    
    if (!formData.position) newErrors.position = 'Please select a position';
    if (!formData.location) newErrors.location = 'Please select a location';
    if (!formData.experience) newErrors.experience = 'Please specify your experience level';
    if (!formData.education) newErrors.education = 'Please specify your education level';
    if (!formData.skills.trim()) newErrors.skills = 'Please list your skills';
    if (!formData.coverLetter.trim()) newErrors.coverLetter = 'Cover letter is required';
    if (!formData.resume) newErrors.resume = 'Resume is required';
    
    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const formErrors = validateForm();
    if (Object.keys(formErrors).length > 0) {
      setErrors(formErrors);
      return;
    }
    
    setIsSubmitting(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setIsSubmitting(false);
    setIsSubmitted(true);
    
    // Reset form after successful submission
    setTimeout(() => {
      setIsSubmitted(false);
      setFormData({
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        position: '',
        location: '',
        experience: '',
        education: '',
        skills: '',
        coverLetter: '',
        resume: null
      });
    }, 3000);
  };

  const handleReset = () => {
    setFormData({
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      position: '',
      location: '',
      experience: '',
      education: '',
      skills: '',
      coverLetter: '',
      resume: null
    });
    setErrors({});
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h1 className="text-4xl md:text-5xl font-bold mb-4">Join Our Team</h1>
          <p className="text-xl md:text-2xl text-blue-100 max-w-3xl mx-auto">
            We're looking for talented individuals to help us build the future. Apply now!
          </p>
        </div>
      </motion.div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {!isSubmitted ? (
          <motion.form
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            onSubmit={handleSubmit}
            className="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100"
          >
            {/* Form Header */}
            <div className="bg-gradient-to-r from-gray-50 to-gray-100 px-8 py-6 border-b border-gray-200">
              <h2 className="text-2xl font-bold text-gray-800 flex items-center">
                <Briefcase className="mr-3 text-blue-600" size={28} />
                Job Application Form
              </h2>
              <p className="text-gray-600 mt-2">Fill out the form below to apply for a position with us</p>
            </div>

            <div className="p-8">
              {/* Personal Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                    <User className="mr-2 text-gray-500" size={18} />
                    First Name *
                  </label>
                  <input
                    type="text"
                    name="firstName"
                    value={formData.firstName}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.firstName ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                    placeholder="Enter your first name"
                  />
                  {errors.firstName && (
                    <p className="text-red-500 text-sm mt-1">{errors.firstName}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                    <User className="mr-2 text-gray-500" size={18} />
                    Last Name *
                  </label>
                  <input
                    type="text"
                    name="lastName"
                    value={formData.lastName}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.lastName ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                    placeholder="Enter your last name"
                  />
                  {errors.lastName && (
                    <p className="text-red-500 text-sm mt-1">{errors.lastName}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                    <Mail className="mr-2 text-gray-500" size={18} />
                    Email Address *
                  </label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.email ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                    placeholder="your.email@domain.com"
                  />
                  {errors.email && (
                    <p className="text-red-500 text-sm mt-1">{errors.email}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                    <Phone className="mr-2 text-gray-500" size={18} />
                    Phone Number *
                  </label>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.phone ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                    placeholder="(123) 456-7890"
                  />
                  {errors.phone && (
                    <p className="text-red-500 text-sm mt-1">{errors.phone}</p>
                  )}
                </div>
              </div>

              {/* Job Information */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                    <Briefcase className="mr-2 text-gray-500" size={18} />
                    Position Applying For *
                  </label>
                  <select
                    name="position"
                    value={formData.position}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.position ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <option value="">Select a position</option>
                    {positions.map((pos, index) => (
                      <option key={index} value={pos}>{pos}</option>
                    ))}
                  </select>
                  {errors.position && (
                    <p className="text-red-500 text-sm mt-1">{errors.position}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                    <MapPin className="mr-2 text-gray-500" size={18} />
                    Preferred Location *
                  </label>
                  <select
                    name="location"
                    value={formData.location}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.location ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <option value="">Select a location</option>
                    {locations.map((loc, index) => (
                      <option key={index} value={loc}>{loc}</option>
                    ))}
                  </select>
                  {errors.location && (
                    <p className="text-red-500 text-sm mt-1">{errors.location}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Years of Experience *</label>
                  <select
                    name="experience"
                    value={formData.experience}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.experience ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <option value="">Select experience level</option>
                    <option value="Entry Level (0-2 years)">Entry Level (0-2 years)</option>
                    <option value="Mid Level (3-5 years)">Mid Level (3-5 years)</option>
                    <option value="Senior Level (6-10 years)">Senior Level (6-10 years)</option>
                    <option value="Expert Level (10+ years)">Expert Level (10+ years)</option>
                  </select>
                  {errors.experience && (
                    <p className="text-red-500 text-sm mt-1">{errors.experience}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                    <GraduationCap className="mr-2 text-gray-500" size={18} />
                    Highest Education Level *
                  </label>
                  <select
                    name="education"
                    value={formData.education}
                    onChange={handleChange}
                    className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                      errors.education ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                    }`}
                  >
                    <option value="">Select education level</option>
                    <option value="High School Diploma">High School Diploma</option>
                    <option value="Associate's Degree">Associate's Degree</option>
                    <option value="Bachelor's Degree">Bachelor's Degree</option>
                    <option value="Master's Degree">Master's Degree</option>
                    <option value="PhD or Doctorate">PhD or Doctorate</option>
                  </select>
                  {errors.education && (
                    <p className="text-red-500 text-sm mt-1">{errors.education}</p>
                  )}
                </div>
              </div>

              {/* Skills and Qualifications */}
              <div className="mb-8">
                <label className="block text-sm font-semibold text-gray-700 mb-2">Key Skills and Qualifications *</label>
                <textarea
                  name="skills"
                  value={formData.skills}
                  onChange={handleChange}
                  rows="4"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                    errors.skills ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                  }`}
                  placeholder="List your key skills, technical expertise, and qualifications. Include specific tools, programming languages, or methodologies you're proficient in."
                />
                {errors.skills && (
                  <p className="text-red-500 text-sm mt-1">{errors.skills}</p>
                )}
              </div>

              {/* Cover Letter */}
              <div className="mb-8">
                <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                  <FileText className="mr-2 text-gray-500" size={18} />
                  Cover Letter *
                </label>
                <textarea
                  name="coverLetter"
                  value={formData.coverLetter}
                  onChange={handleChange}
                  rows="6"
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                    errors.coverLetter ? 'border-red-500 bg-red-50' : 'border-gray-300 hover:border-gray-400'
                  }`}
                  placeholder="Write a compelling cover letter explaining why you're interested in this position and how your experience makes you a great fit. Highlight specific achievements and how you can contribute to our team."
                />
                {errors.coverLetter && (
                  <p className="text-red-500 text-sm mt-1">{errors.coverLetter}</p>
                )}
              </div>

              {/* Resume Upload */}
              <div className="mb-8">
                <label className="block text-sm font-semibold text-gray-700 mb-2 flex items-center">
                  <Upload className="mr-2 text-gray-500" size={18} />
                  Resume/CV *
                </label>
                <div className="flex items-center justify-center w-full">
                  <label className={`flex flex-col items-center justify-center w-full h-32 border-2 border-dashed rounded-lg cursor-pointer transition-all duration-200 ${
                    formData.resume 
                      ? 'border-green-500 bg-green-50 hover:bg-green-100' 
                      : errors.resume 
                        ? 'border-red-500 bg-red-50 hover:bg-red-100' 
                        : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                  }`}>
                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                      <Upload className="w-8 h-8 mb-3 text-gray-500" />
                      <p className="mb-2 text-sm text-gray-600">
                        <span className="font-semibold">Click to upload</span> or drag and drop
                      </p>
                      <p className="text-xs text-gray-500">
                        {formData.resume ? `Selected: ${formData.resume.name}` : 'PDF or DOCX (MAX. 5MB)'}
                      </p>
                    </div>
                    <input
                      type="file"
                      className="hidden"
                      accept=".pdf,.doc,.docx"
                      onChange={handleFileChange}
                    />
                  </label>
                </div>
                {errors.resume && (
                  <p className="text-red-500 text-sm mt-1">{errors.resume}</p>
                )}
                <p className="text-xs text-gray-500 mt-2">Accepted formats: PDF, DOC, DOCX. Maximum file size: 5MB</p>
              </div>

              {/* Submit Button */}
              <div className="flex flex-col sm:flex-row gap-4 pt-6 border-t border-gray-200">
                <button
                  type="button"
                  onClick={handleReset}
                  className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-all duration-200 font-medium"
                >
                  Reset Form
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-purple-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-200 font-semibold disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                      Processing...
                    </>
                  ) : (
                    'Submit Application'
                  )}
                </button>
              </div>
            </div>
          </motion.form>
        ) : (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="bg-white rounded-2xl shadow-xl overflow-hidden text-center p-12"
          >
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h2 className="text-3xl font-bold text-gray-800 mb-4">Application Submitted!</h2>
            <p className="text-gray-600 mb-6 text-lg">
              Thank you for applying to our team. We've received your application and will review it shortly.
            </p>
            <p className="text-gray-500">
              Our recruitment team will contact you within 5-7 business days if your qualifications match our requirements.
            </p>
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default JobApplicationForm;
===============================================================================================================
import React, { useState, useEffect } from "react";
import { Calculator, Coins, TrendingUp, Clock, Percent, DollarSign, ArrowRight, Gem, Scale, List } from "lucide-react";

const GoldLoanCalculator = () => {
  const [ornaments, setOrnaments] = useState([{ id: 1, quantity: 1, weight: '', carat: '22' }]);
  const [interestRate, setInterestRate] = useState("12");
  const [loanTenure, setLoanTenure] = useState("12");
  const [loanToValue, setLoanToValue] = useState("75");
  const [monthlyEMI, setMonthlyEMI] = useState(0);
  const [totalInterest, setTotalInterest] = useState(0);
  const [totalPayment, setTotalPayment] = useState(0);
  const [loanEligibility, setLoanEligibility] = useState(0);
  const [goldValue, setGoldValue] = useState(0);

  // Current gold price per gram (can be updated based on market)
  const currentGoldPricePerGram = 9200; // INR per gram

  // Carat purity factors
  const caratFactors = {
    '24': 1.0,
    '22': 0.9167,
    '21': 0.875,
    '18': 0.75,
    '14': 0.583,
    '10': 0.4167
  };

  const caratOptions = [
    { value: '24', label: '24 Carat (99.9% Pure)' },
    { value: '22', label: '22 Carat (91.67% Pure)' },
    { value: '21', label: '21 Carat (87.5% Pure)' },
    { value: '18', label: '18 Carat (75% Pure)' },
    { value: '14', label: '14 Carat (58.3% Pure)' },
    { value: '10', label: '10 Carat (41.67% Pure)' }
  ];

  const addOrnament = () => {
    const newId = Math.max(...ornaments.map(o => o.id)) + 1;
    setOrnaments([...ornaments, { id: newId, quantity: 1, weight: '', carat: '22' }]);
  };

  const removeOrnament = (id) => {
    if (ornaments.length > 1) {
      setOrnaments(ornaments.filter(ornament => ornament.id !== id));
    }
  };

  const updateOrnament = (id, field, value) => {
    setOrnaments(ornaments.map(ornament => 
      ornament.id === id ? { ...ornament, [field]: value } : ornament
    ));
  };

  // Calculate EMI using the standard formula: EMI = P × r × (1 + r)^n / ((1 + r)^n - 1)
  const calculateEMI = (principal, rate, tenure) => {
    const monthlyRate = rate / 100 / 12;
    const emi = principal * monthlyRate * Math.pow(1 + monthlyRate, tenure) / (Math.pow(1 + monthlyRate, tenure) - 1);
    return emi;
  };

  const calculateGoldValue = () => {
    let totalValue = 0;
    
    ornaments.forEach(ornament => {
      if (ornament.weight && ornament.quantity) {
        const weight = parseFloat(ornament.weight);
        const quantity = parseInt(ornament.quantity) || 1;
        const caratFactor = caratFactors[ornament.carat] || 0;
        
        // Calculate value for this ornament type
        const ornamentValue = weight * quantity * currentGoldPricePerGram * caratFactor;
        totalValue += ornamentValue;
      }
    });
    
    return totalValue;
  };

  const handleCalculate = () => {
    const value = calculateGoldValue();
    setGoldValue(value);
    
    // Calculate loan eligibility
    const eligibility = (value * parseFloat(loanToValue)) / 100;
    setLoanEligibility(eligibility);
    
    // Calculate EMI and other values
    const emi = calculateEMI(eligibility, parseFloat(interestRate), parseInt(loanTenure));
    const total = emi * parseInt(loanTenure);
    const interest = total - eligibility;
    
    setMonthlyEMI(emi);
    setTotalInterest(interest);
    setTotalPayment(total);
  };

  const resetCalculator = () => {
    setOrnaments([{ id: 1, quantity: 1, weight: '', carat: '22' }]);
    setInterestRate("12");
    setLoanTenure("12");
    setLoanToValue("75");
    setGoldValue(0);
    setLoanEligibility(0);
    setMonthlyEMI(0);
    setTotalInterest(0);
    setTotalPayment(0);
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
      minimumFractionDigits: 2,
    }).format(amount);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
      {/* Header */}
      

      <div className="max-w-7xl mx-auto px-1 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Calculator Form */}
          <div className="bg-white rounded-2xl shadow-2xl p-8 border border-amber-100">
            <div className="flex items-center space-x-2 mb-6">
              <Calculator className="h-4 w-4 text-amber-600" />
              <h2 className="text-2xl font-bold text-gray-800">Calculate Your Gold Loan</h2>
            </div>

            <div className="space-y-2">
              {/* Ornaments Section */}
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                    <List className="h-5 w-5 mr-2 text-amber-600" />
                    Gold Ornaments
                  </h3>
                  <button
                    onClick={addOrnament}
                    className="bg-amber-100 text-amber-700 px-3 py-1 rounded-lg text-sm font-medium hover:bg-amber-200 transition-colors duration-200"
                  >
                    + Add Ornament
                  </button>
                </div>

                {ornaments.map((ornament, index) => (
                  <div key={ornament.id} className="bg-gray-50 rounded-xl p-4 space-y-2 border border-gray-200">
                    <div className="flex items-center justify-between">
                      <h4 className="font-medium text-gray-700">Ornament {index + 1}</h4>
                      {ornaments.length > 1 && (
                        <button
                          onClick={() => removeOrnament(ornament.id)}
                          className="text-red-500 hover:text-red-700 text-sm font-medium"
                        >
                          Remove
                        </button>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                      <div className="space-y-1">
                        <label className="text-sm font-medium text-gray-600">Quantity</label>
                        <input
                          type="number"
                          min="1"
                          value={ornament.quantity}
                          onChange={(e) => updateOrnament(ornament.id, 'quantity', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm"
                        />
                      </div>
                      
                      <div className="space-y-1">
                        <label className="text-sm font-medium text-gray-600">Weight (grams)</label>
                        <div className="relative">
                          <input
                            type="number"
                            step="0.01"
                            value={ornament.weight}
                            onChange={(e) => updateOrnament(ornament.id, 'weight', e.target.value)}
                            placeholder="0.00"
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm pl-6"
                          />
                          <span className="absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400 text-xs">g</span>
                        </div>
                      </div>
                      
                      <div className="space-y-1">
                        <label className="text-sm font-medium text-gray-600">Carat</label>
                        <select
                          value={ornament.carat}
                          onChange={(e) => updateOrnament(ornament.id, 'carat', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent text-sm"
                        >
                          {caratOptions.map(option => (
                            <option key={option.value} value={option.value}>
                              {option.label}
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Gold Market Information */}
              <div className="bg-amber-50 border border-amber-200 rounded-xl p-4">
                <div className="flex items-center space-x-2 mb-2">
                  <Gem className="h-4 w-4 text-amber-600" />
                  <h4 className="font-medium text-amber-800">Current Gold Rate</h4>
                </div>
                <p className="text-sm text-amber-700">
                  <strong>₹{currentGoldPricePerGram.toLocaleString()}</strong> per gram (24 Carat)
                </p>
                <p className="text-xs text-amber-600 mt-1">
                  Prices are subject to market fluctuations
                </p>
              </div>

              {/* Loan to Value Ratio */}
              <div className="space-y-2">
                <label className="flex items-center text-sm font-medium text-gray-700">
                  <Percent className="h-4 w-4 mr-2 text-amber-600" />
                  Loan to Value Ratio ({loanToValue}%)
                </label>
                <input
                  type="range"
                  min="50"
                  max="90"
                  step="5"
                  value={loanToValue}
                  onChange={(e) => setLoanToValue(e.target.value)}
                  className="w-full h-2 bg-amber-100 rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-gray-500">
                  <span>50%</span>
                  <span>75%</span>
                  <span>90%</span>
                </div>
              </div>

              {/* Interest Rate */}
              <div className="space-y-2">
                <label className="flex items-center text-sm font-medium text-gray-700">
                  <Percent className="h-4 w-4 mr-2 text-amber-600" />
                  Annual Interest Rate ({interestRate}%)
                </label>
                <input
                  type="range"
                  min="8"
                  max="18"
                  step="0.5"
                  value={interestRate}
                  onChange={(e) => setInterestRate(e.target.value)}
                  className="w-full h-2 bg-amber-100 rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-gray-500">
                  <span>8%</span>
                  <span>12%</span>
                  <span>18%</span>
                </div>
              </div>

              {/* Loan Tenure */}
              <div className="space-y-2">
                <label className="flex items-center text-sm font-medium text-gray-700">
                  <Clock className="h-4 w-4 mr-2 text-amber-600" />
                  Loan Tenure ({loanTenure} months)
                </label>
                <select
                  value={loanTenure}
                  onChange={(e) => setLoanTenure(e.target.value)}
                  className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 text-lg"
                >
                  <option value="1">1 months</option>
                  <option value="3">3 months</option>
                  <option value="6">6 months</option>
                  <option value="9">9 months</option>
                  <option value="12">12 months</option>
                  <option value="18">18 months</option>
                  <option value="24">24 months</option>
                  <option value="36">36 months</option>
                  <option value="48">48 months</option>
                  <option value="60">60 months</option>
                </select>
              </div>

              {/* Action Buttons */}
              <div className="flex space-x-3 pt-4">
                <button
                  onClick={resetCalculator}
                  className="flex-1 bg-gray-100 text-gray-700 py-3 px-6 rounded-xl font-medium hover:bg-gray-200 transition-colors duration-200"
                >
                  Reset
                </button>
                <button
                  onClick={handleCalculate}
                  className="flex-1 bg-gradient-to-r from-amber-700 to-yellow-500 text-white py-3 px-6 rounded-xl font-medium hover:from-amber-600 hover:to-yellow-600 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
                >
                  Calculate
                </button>
              </div>
            </div>
          </div>

          {/* Results Section */}
          <div className="space-y-2">
            {/* Gold Valuation Card */}
            <div className="bg-white rounded-2xl shadow-2xl p-8 border border-amber-100">
              <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center">
                <Scale className="h-5 w-5 mr-2 text-amber-600" />
                Gold Valuation
              </h3>
              
              <div className="space-y-2">
                <div className="flex justify-between items-center py-3 border-b border-gray-100">
                  <span className="text-gray-600">Total Ornaments</span>
                  <span className="font-semibold text-lg text-gray-800">{ornaments.length}</span>
                </div>
                
                <div className="flex justify-between items-center py-3 border-b border-gray-100">
                  <span className="text-gray-600">Total Weight</span>
                  <span className="font-semibold text-lg text-gray-800">
                    {ornaments.reduce((total, o) => {
                      const weight = parseFloat(o.weight) || 0;
                      const quantity = parseInt(o.quantity) || 1;
                      return total + (weight * quantity);
                    }, 0).toFixed(2)} g
                  </span>
                </div>
                
                <div className="flex justify-between items-center py-3 border-b border-gray-100">
                  <span className="text-gray-600">Gold Value</span>
                  <span className="font-semibold text-lg text-green-600">{formatCurrency(goldValue)}</span>
                </div>
                
                <div className="flex justify-between items-center py-3">
                  <span className="text-gray-600">Eligible Loan Amount</span>
                  <span className="font-bold text-xl text-amber-600">{formatCurrency(loanEligibility)}</span>
                </div>
              </div>
            </div>

            {/* Loan Summary Card */}
            <div className="bg-white rounded-2xl shadow-2xl p-8 border border-amber-100">
              <h3 className="text-xl font-bold text-gray-800 mb-6 flex items-center">
                <TrendingUp className="h-5 w-5 mr-2 text-amber-600" />
                Loan Summary
              </h3>
              
              <div className="space-y-2">
                <div className="flex justify-between items-center py-3 border-b border-gray-100">
                  <span className="text-gray-600">Monthly EMI</span>
                  <span className="font-semibold text-lg text-amber-600">{formatCurrency(monthlyEMI)}</span>
                </div>
                
                <div className="flex justify-between items-center py-3 border-b border-gray-100">
                  <span className="text-gray-600">Total Interest</span>
                  <span className="font-semibold text-lg text-red-600">{formatCurrency(totalInterest)}</span>
                </div>
                
                <div className="flex justify-between items-center py-3">
                  <span className="text-gray-600">Total Payment</span>
                  <span className="font-bold text-xl text-green-600">{formatCurrency(totalPayment)}</span>
                </div>
              </div>
            </div>

            {/* Benefits Card */}
            <div className="bg-gradient-to-r from-amber-700 to-yellow-500 rounded-2xl shadow-2xl p-8 text-white">
              <h3 className="text-xl font-bold mb-4">Why Choose Gold Loan?</h3>
              <ul className="space-y-3">
                <li className="flex items-center space-x-3">
                  <div className="bg-white bg-opacity-20 p-1 rounded-full">
                    <ArrowRight className="h-4 w-4" />
                  </div>
                  <span>Quick approval within 24 hours</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="bg-white bg-opacity-20 p-1 rounded-full">
                    <ArrowRight className="h-4 w-4" />
                  </div>
                  <span>Loan up to 90% of gold value</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="bg-white bg-opacity-20 p-1 rounded-full">
                    <ArrowRight className="h-4 w-4" />
                  </div>
                  <span>Competitive interest rates starting from 8%</span>
                </li>
                <li className="flex items-center space-x-3">
                  <div className="bg-white bg-opacity-20 p-1 rounded-full">
                    <ArrowRight className="h-4 w-4" />
                  </div>
                  <span>No credit score requirement</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        .slider::-webkit-slider-thumb {
          appearance: none;
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: linear-gradient(135deg, #f59e0b, #d97706);
          cursor: pointer;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        
        .slider::-moz-range-thumb {
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: linear-gradient(135deg, #f59e0b, #d97706);
          cursor: pointer;
          border: none;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
      `}</style>
    </div>
  );
};

export default GoldLoanCalculator;
=================================================
 {/* 7 C's Core Values Section */}
      <section className="py-16 bg-gradient-to-br from-white via-red-50 to-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-6 leading-tight">
              We are in the business of building
              <span className="block text-red-600 mt-2">Trust and Relationships</span>
            </h2>
            
            <div className="max-w-3xl mx-auto">
              <p className="text-xl text-gray-700 leading-relaxed">
                At UNIGOLD, we believe in creating comfort that assures our customers 
                they're in the right place and will be treated in a fair and transparent manner.
              </p>
            </div>
          </div>

          {/* 7 C's Title */}
          <div className="text-center mb-12">
            <div className="inline-flex items-center gap-3 bg-red-100 px-6 py-3 rounded-full">
              <div className="w-2 h-2 bg-red-600 rounded-full"></div>
              <span className="text-lg font-semibold text-red-700">7 C's: Unigold Standards for Customer Engagement</span>
            </div>
          </div>

          {/* Core Values Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {coreValues.map((value, index) => (
              <div
                key={index}
                data-index={index}
                className={`core-value-card transition-all duration-700 transform ${
                  animatedItems.includes(index)
                    ? 'translate-y-0 opacity-100'
                    : 'translate-y-8 opacity-0'
                }`}
              >
                <div className="h-full bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 border border-gray-100">
                  <div className="p-8">
                    {/* Icon & Title */}
                    <div className="flex items-center gap-4 mb-6">
                      <div className="w-14 h-14 bg-red-100 rounded-xl flex items-center justify-center flex-shrink-0">
                        <span className="text-2xl">{value.icon}</span>
                      </div>
                      <div>
                        <h3 className="text-2xl font-bold text-gray-900">{value.title}</h3>
                        <p className="text-red-600 font-medium">{value.subtitle}</p>
                      </div>
                    </div>
                    
                    {/* Description */}
                    <p className="text-gray-700 leading-relaxed pl-16">
                      {value.description}
                    </p>
                    
                    {/* Decorative element */}
                    <div className="mt-6 pt-6 border-t border-gray-100">
                      <div className="flex justify-end">
                        <div className="w-8 h-0.5 bg-gradient-to-r from-transparent to-red-600"></div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
      ======================================================================================
      // import React from 'react';

// import { useState, useEffect } from 'react';

// const HomeCarousel = () => {
//   const [currentSlide, setCurrentSlide] = useState(0);
  
//   const slides = [
//     {
//       id: 1,
//       image: "https://placehold.co/1200x400/f5f5f5/333?text=Muthoot+Finance+Gold+Loan",
//       title: "Muthoot Finance",
//       subtitle: "INDIA'S LARGEST GOLD LOAN NBFC",
//       content: "Instant Gold Loan | 2.5 Lakh+ Customers Served Every Daily* | Attractive Interest Rates",
//       phone: "1800 313 1212",
//       website: "muthootfinance.com"
//     },
//     {
//       id: 2,
//       image: "https://placehold.co/1200x400/f5f5f5/333?text=Credit+Score+Services",
//       title: "Credit Score Services",
//       subtitle: "Improve Your Financial Health",
//       content: "Get your credit score and improve your financial standing",
//       phone: "1800 313 1212",
//       website: "muthootfinance.com"
//     },
//     {
//       id: 3,
//       image: "https://placehold.co/1200x400/f5f5f5/333?text=Housing+Finance",
//       title: "Housing Finance",
//       subtitle: "Your Dream Home Made Possible",
//       content: "Affordable housing loans with competitive interest rates",
//       phone: "1800 313 1212",
//       website: "muthootfinance.com"
//     }
//   ];

//   useEffect(() => {
//     const timer = setInterval(() => {
//       setCurrentSlide((prev) => (prev + 1) % slides.length);
//     }, 5000);
//     return () => clearInterval(timer);
//   }, [slides.length]);

//   const goToSlide = (index) => {
//     setCurrentSlide(index);
//   };

//   const nextSlide = () => {
//     setCurrentSlide((prev) => (prev + 1) % slides.length);
//   };

//   const prevSlide = () => {
//     setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);
//   };

//   // Service cards data
//   const services = [
//     { name: "GOLD FLEXI CREDIT", icon: "💰" },
//     { name: "CREDIT SCORE", icon: "📊" },
//     { name: "GOLD LOAN", icon: "💍" },
//     { name: "HOUSING FINANCE", icon: "🏠" },
//     { name: "PERSONAL LOAN", icon: "💼" },
//     { name: "SMALL BUSINESS LOAN", icon: "🏢" },
//     { name: "INSURANCE", icon: "🛡️" }
//   ];

//   return (
//     <div className="min-h-screen bg-white">
//       {/* Header */}
//       <header className="bg-white border-b border-gray-200 sticky top-0 z-50">
//         <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
//           <div className="flex justify-between items-center h-16">
//             {/* Logo */}
//             <div className="flex items-center">
//               <div className="flex items-center space-x-2">
//                 <div className="w-10 h-10 bg-red-600 rounded-full flex items-center justify-center">
//                   <span className="text-white font-bold text-lg">MF</span>
//                 </div>
//                 <span className="text-xl font-bold text-red-600">Muthoot Finance</span>
//               </div>
//             </div>

//             {/* Navigation */}
//             <nav className="hidden md:flex space-x-6">
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">HOME</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">SERVICES</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">CORPORATE</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">INVESTORS</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">POLICY</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">DIGITAL INITIATIVES</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">CAREERS</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">CSR</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">MEDIA</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">NEWS</a>
//               <a href="#" className="text-sm font-medium text-gray-700 hover:text-red-600 transition-colors">CONTACT</a>
//               <button className="text-gray-700 hover:text-red-600 transition-colors">
//                 <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
//                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
//                 </svg>
//               </button>
//             </nav>

//             {/* WhatsApp Contact */}
//             <div className="hidden md:flex items-center space-x-2">
//               <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
//                 <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
//                   <path d="M2.003 5.884l8 4.8a1 1 0 00.994 0l8-4.8A1 1 0 0018 4H2a1 1 0 00.003 1.884z" />
//                   <path d="M18 8.118l-7.555 4.533a3 3 0 01-2.89 0L2 8.118V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
//                 </svg>
//               </div>
//               <span className="text-sm font-medium text-gray-700">WhatsApp</span>
//             </div>
//           </div>
//         </div>
//       </header>

//       {/* Carousel */}
//       <div className="relative">
//         <div className="overflow-hidden h-64 sm:h-80 md:h-96 lg:h-[500px]">
//           {slides.map((slide, index) => (
//             <div
//               key={slide.id}
//               className={`absolute inset-0 transition-opacity duration-1000 ${index === currentSlide ? 'opacity-100' : 'opacity-0'}`}
//             >
//               <img src={slide.image} alt={slide.title} className="w-full h-full object-cover" />
//               <div className="absolute inset-0 bg-black bg-opacity-50 flex flex-col items-center justify-center text-center text-white p-4">
//                 <h2 className="text-lg font-bold">{slide.title}</h2>
//                 <p className="mt-2">{slide.description}</p>
//               </div>
//             </div>
//           ))}
//         </div>
//       </div>
//       </div>
//     );
//   };
// export default HomeCarousel; 